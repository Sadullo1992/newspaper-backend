openapi: 3.0.0
info:
  title: Newspaper Service
  description: Daily news website service
  version: 1.0.0

servers:
  - url: http://localhost:4000/

components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Adabiyot va sanat'
        slug:
          type: string
          example: 'adabiyot-va-sanat'
          format: slug
    Image:
      type: object
      properties:
        id:
          type: string
          format: uuid
        imagename:
          type: string
          example: 'image.jpg'
        imageSize:
          type: integer
          example: 524512
        postId:
          type: string
          format: uuid
          nullable: true
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: 'Post title'
        slug:
          type: string
          example: 'post-title'
          format: slug
        categoryId:
          type: string
          format: uuid
          nullable: true
        createdAt:
          type: number
          example: 1655000000
        updatedAt:
          type: number
          example: 1655000000
        isActual:
          type: boolean
          example: true
        isFeatured:
          type: boolean
          example: false
        views:
          type: integer
          example: 0
        author:
          type: string
          nullable: true
          example: John Doe
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
      required:
        - id
        - title
        - slug
        - categoryId
    Magazine:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: '1-son'
        filename:
          type: string
          example: '1-son.pdf'
        createdAt:
          type: number
          example: 1655000000
        size:
          type: number
          example: 524512
        downloadsCount:
          type: number
          example: 0
      required:
        - id
        - filename
        - name

paths:
  /admin/category:
    get:
      tags:
        - Admin Category
      summary: Get all categories
      description: Gets all categories
      parameters:
        - name: page
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: perPage
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      latsPage:
                        type: integer
                      currentPage:
                        type: integer
                      perPage:
                        type: integer
                      prev:
                        type: integer
                        nullable: true
                      next:
                        type: integer
                        nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
    post:
      tags:
        - Admin Category
      summary: Create category
      description: Creates a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  description: The category's name
                slug:
                  type: string
                  format: slug
                  description: The category's slug
              required:
                - name
                - slug
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request. body does not contain required fields
        409:
          description: Conflict. Category slug already exists!
  /admin/category/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Admin Category
      summary: Get single category by id
      description: Get single category by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request. categoryId is invalid
        404:
          description: Category not found
    put:
      tags:
        - Admin Category
      summary: Update category information
      description: Update category information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  example: Adabiyot va sanat
                slug:
                  type: string
                  format: slug
                  example: adabiyot-va-sanat
              required:
                - slug
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request. categoryId is invalid
        404:
          description: Category not found
    delete:
      tags:
        - Admin Category
      summary: Delete category
      description: Delete category from service
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. categoryId is invalid (not uuid)
        404:
          description: Category was not found.
  /upload/image:
    post:
      tags:
        - Post Image
      summary: Upload image
      description: upload image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        201:
          description: The Image has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        400:
          description: Invalid file type or file size is exceed
        409:
          description: Image filename already exists!
  /media/images/{imagename}:
    parameters:
      - name: imagename
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Post Image
      summary: Get image source file by url
      description: Get image source by url
      responses:
        200:
          description: Successful operation
          content:
            image/*:
              schema:
                type: string
                format: binary
        400:
          description: Bad request. imagename was not found
        404:
          description: Image file not found

  /admin/post:
    get:
      tags:
        - Admin Post
      summary: Get all posts
      description: Gets all posts
      parameters:
        - name: page
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: perPage
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      latsPage:
                        type: integer
                      currentPage:
                        type: integer
                      perPage:
                        type: integer
                      prev:
                        type: integer
                        nullable: true
                      next:
                        type: integer
                        nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
    post:
      tags:
        - Admin Post
      summary: Create post
      description: Creates a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                title:
                  type: string
                  description: The post's title
                slug:
                  type: string
                  format: slug
                  description: The post's slug
                categoryId:
                  type: string
                  format: uuid
                  nullable: true
                  description: The category id of post
                content:
                  type: string
                  description: The post's content
                isActual:
                  type: boolean
                  description: Is the post actual?
                isFeatured:
                  type: boolean
                  description: Is the post featured?
                author:
                  type: string
                  nullable: true
                  description: The post's author
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: image's id
                      imagename:
                        type: string
                        description: filename of image
              required:
                - title
                - slug
                - categoryId
                - content
                - isActual
                - isFeatured
                - images
      responses:
        201:
          description: The category has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request. Body does not contain required fields
        409:
          description: Conflict. Post slug already exists!
  /admin/post/{postId}:
    parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Admin Post
      summary: Get single post by id
      description: Get single post by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Bad request. postId is invalid
        404:
          description: Post not found
    put:
      tags:
        - Admin Post
      summary: Update post information
      description: Update post information by UUID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                title:
                  type: string
                  description: The post's title
                slug:
                  type: string
                  format: slug
                  description: The post's slug
                categoryId:
                  type: string
                  format: uuid
                  nullable: true
                  description: The category id of post
                content:
                  type: string
                  description: The post's content
                isActual:
                  type: boolean
                  description: Is the post actual?
                isFeatured:
                  type: boolean
                  description: Is the post featured?
                author:
                  type: string
                  nullable: true
                  description: The post's author
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: image's id
                      imagename:
                        type: string
                        description: filename of image
              required:
                - slug
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request. postId is invalid
        404:
          description: Category not found
    delete:
      tags:
        - Admin Post
      summary: Delete post
      description: Delete post from service
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. postId is invalid (not uuid)
        404:
          description: Post was not found.

  /admin/magazine:
    get:
      tags:
        - Admin Magazine
      summary: Get all magazines
      description: Gets all magazines
      parameters:
        - name: page
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: perPage
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      latsPage:
                        type: integer
                      currentPage:
                        type: integer
                      perPage:
                        type: integer
                      prev:
                        type: integer
                        nullable: true
                      next:
                        type: integer
                        nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Magazine'
    post:
      tags:
        - Admin Magazine
      summary: Create magazine with file
      description: Create magazine with its file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                magazine-file:
                  type: string
                  format: binary
                name:
                  type: string
                  description: The name of magazine
                  example: 1-son
                createdAt:
                  type: number
                  description: created time
                  example: 1655000000
              required:
                - magazine-file
                - name
                - createdAt
      responses:
        201:
          description: The Magazine has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
        400:
          description: Invalid file type or exceed file size
        409:
          description: Magazine file already exists!
  /admin/magazine/{magazineId}:
    parameters:
      - name: magazineId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Admin Magazine
      summary: Get single magazine by id
      description: Get single magazine by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
        400:
          description: Bad request. magazineId is invalid
        404:
          description: magazine not found
    put:
      tags:
        - Admin Magazine
      summary: Update magazine information
      description: Update magazine information by UUID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                magazine-file:
                  type: string
                  format: binary
                name:
                  type: string
                  description: The name of magazine
                  example: 1-son
                createdAt:
                  type: number
                  description: created time
                  example: 1655000000
              required:
                - name
                - createdAt
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Magazine'
        400:
          description: Bad request. magazineId is invalid
        404:
          description: Magazine not found
    delete:
      tags:
        - Admin Magazine
      summary: Delete magazine
      description: Delete magazine from service
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. magazineId is invalid (not uuid)
        404:
          description: Magazine was not found.

  /categories:
    get:
      tags:
        - Public Categories
      summary: Get all categories
      description: Gets all categories
      parameters:
        - name: page
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: perPage
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      latsPage:
                        type: integer
                      currentPage:
                        type: integer
                      perPage:
                        type: integer
                      prev:
                        type: integer
                        nullable: true
                      next:
                        type: integer
                        nullable: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
  /categories/{slug}/posts:
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Public Categories
      summary: Get all posts related to category
      description: Get all posts related to category
      parameters:
        - name: page
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
        - name: perPage
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      latsPage:
                        type: integer
                      currentPage:
                        type: integer
                      perPage:
                        type: integer
                      prev:
                        type: integer
                        nullable: true
                      next:
                        type: integer
                        nullable: true
                  data:
                    type: array
                    items:
                      type: object
                      title: example
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                          example: 'Post title'
                        slug:
                          type: string
                          example: 'post-title'
                          format: slug
                        createdAt:
                          type: number
                          example: 1655000000
                        updatedAt:
                          type: number
                          example: 1655000000
                        views:
                          type: integer
                          example: 0
                        images:
                          type: array
                          items:
                            $ref: '#/components/schemas/Image'
